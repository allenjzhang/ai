import { Octokit } from "@octokit/rest";
import { AzureOpenAI } from "openai";
import * as fs from "fs";

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const endpoint = process.env.AZURE_OPENAI_BASE_URL;
const deployment = process.env.AZURE_OPENAI_DEPLOYMENT_NAME;
const model_name = process.env.OPENAI_MODEL_NAME || "gpt-3.5-turbo";
const apiKey = process.env.AZURE_OPENAI_API_KEY;
const apiVersion = process.env.AZURE_OPENAI_VERSION;
const OUTPUT_FILE = "review.md";

// Create review.md if it doesn't exist
if (!fs.existsSync("review.md")) {
  fs.writeFileSync(
    "review.md",
    "# Code Review\nGenerated by GitHub Action\n",
    "utf8"
  );
}

if (!GITHUB_TOKEN) {
  throw new Error("Missing GITHUB_TOKEN");
}

if (!apiKey) {
  throw new Error("Missing AZURE_OPENAI_API_KEY");
}

if (!endpoint) {
  throw new Error("Missing AZURE_OPENAI_BASE_URL");
}

const octokit = new Octokit({ auth: GITHUB_TOKEN });
const options = { endpoint, apiKey, deployment, apiVersion };
const client = new AzureOpenAI(options);

async function getChangedFiles(): Promise<string[]> {
  const eventPath = process.env.GITHUB_EVENT_PATH;
  if (!eventPath) return [];
  const event = JSON.parse(fs.readFileSync(eventPath, "utf8"));
  if (event.pull_request) {
    const { base, head, number } = event.pull_request;
    const repo = event.repository;
    const res = await octokit.repos.compareCommits({
      owner: repo.owner.login,
      repo: repo.name,
      base: base.sha,
      head: head.sha,
    });
    return res.data.files?.map((f) => f.filename) || [];
  }
  return [];
}

async function getFileContent(path: string): Promise<string> {
  return fs.readFileSync(path, "utf8");
}

async function reviewFiles(files: string[]): Promise<string> {
  let summary = "# LLM Code Review\n\n";
  for (const file of files) {
    console.log("About to review file:", file);
    if (!fs.existsSync(file) || fs.lstatSync(file).isDirectory()) continue;
    console.log("Reviewing file:", file);
    const content = await getFileContent(file);
    // TODO: Use repo's system prompts or guidelines if available
    const prompt = `You are a senior software engineer. Review the following file for code quality, bugs, and best practices. Provide a concise summary and actionable suggestions.\n\nFile: ${file}\n\n\`
${content.slice(0, 4000)}\u000A\``;
    const resp = await client.chat.completions.create({
      model: model_name,
      messages: [{ role: "user", content: prompt }],
      max_tokens: 500,
    });

    const review = resp.choices[0]?.message?.content?.trim();
    console.log("Review for", file, ":", review);
    summary += `## ${file}\n${review || "No feedback."}\n\n`;
  }
  return summary;
}

(async () => {
  const files = await getChangedFiles();
  if (!files.length) {
    fs.writeFileSync(OUTPUT_FILE, "No changed files found.");
    return;
  }
  const review = await reviewFiles(files);
  fs.writeFileSync(OUTPUT_FILE, review);
})();
